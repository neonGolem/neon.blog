<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drunken Ramblings on neon•Golem</title>
    <link>//localhost:1313/tags/drunken-ramblings/</link>
    <description>Recent content in Drunken Ramblings on neon•Golem</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Sep 2025 23:07:32 +0300</lastBuildDate>
    <atom:link href="//localhost:1313/tags/drunken-ramblings/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I2C 2 - Electric Boogaloo</title>
      <link>//localhost:1313/posts/i2c-electric-boogaloo/</link>
      <pubDate>Thu, 11 Sep 2025 23:07:32 +0300</pubDate>
      <guid>//localhost:1313/posts/i2c-electric-boogaloo/</guid>
      <description>&lt;h2 id=&#34;communication-established-now-what&#34;&gt;Communication established. Now what?&lt;/h2&gt;&#xA;&lt;p&gt;The last chapter details the pains of getting the silicon to respond to us. What needs to happen next is a two way communication with meaning. Since we&amp;rsquo;re working with a microcontroller, the first step is to establish a communication method that enables us to use the MCU as a bridge and talk to the target in such a way that we don&amp;rsquo;t have to hard-code every single thing. Up til now, I&amp;rsquo;ve set it to fire a command at the I2C bus on the push of a button and then report its&amp;rsquo; findings over UART. The better way of doing this is to have the machine read the from UART, parse the data into a command and argument form, then react accordingly.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
