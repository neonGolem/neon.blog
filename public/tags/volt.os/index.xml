<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Volt.OS on neon•Golem</title>
    <link>//localhost:1313/tags/volt.os/</link>
    <description>Recent content in Volt.OS on neon•Golem</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Sep 2025 23:07:32 +0300</lastBuildDate>
    <atom:link href="//localhost:1313/tags/volt.os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I2C 2 - Electric Boogaloo</title>
      <link>//localhost:1313/posts/i2c-electric-boogaloo/</link>
      <pubDate>Thu, 11 Sep 2025 23:07:32 +0300</pubDate>
      <guid>//localhost:1313/posts/i2c-electric-boogaloo/</guid>
      <description>&lt;h2 id=&#34;communication-established-now-what&#34;&gt;Communication established. Now what?&lt;/h2&gt;&#xA;&lt;p&gt;The last chapter details the pains of getting the silicon to respond to us. What needs to happen next is a two way communication with meaning. Since we&amp;rsquo;re working with a microcontroller, the first step is to establish a communication method that enables us to use the MCU as a bridge and talk to the target in such a way that we don&amp;rsquo;t have to hard-code every single thing. Up til now, I&amp;rsquo;ve set it to fire a command at the I2C bus on the push of a button and then report its&amp;rsquo; findings over UART. The better way of doing this is to have the machine read the from UART, parse the data into a command and argument form, then react accordingly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The smoke test. Am I still an engineer?</title>
      <link>//localhost:1313/posts/smoke-test/</link>
      <pubDate>Sun, 31 Aug 2025 00:52:19 +0300</pubDate>
      <guid>//localhost:1313/posts/smoke-test/</guid>
      <description>&lt;h2 id=&#34;am-i-still-an-engineer&#34;&gt;Am I still an engineer?&lt;/h2&gt;&#xA;&lt;p&gt;The question itself is pretty wild coming from me, someone working as an engineer, but hear me out. It&amp;rsquo;s been almost a year since I wrote any firmware or did any work on any microcontroller in general. This is then an excellent smoke test - do I still have what it takes? The premise is not too outlandish. Wire up an STUSB4500, tell it to negotiate 5V3A, 9V1.5A  and 15V3A. A month ago, I placed an order with a Chinese manufacturer and received the boards last week. By default the IC does not negotiate 9V - which is incidentally the one I need, because that&amp;rsquo;s what the cheapest big capacity powerbank I chose to use does. For programming the device, I left a 100mil grid of testpoints that I intend to connect to using pogo pins. The 3x2 grid consists of 2 vias in opposing corners, a ground, a power and the I2C pins. Simple enough. An afternoon is all it should take.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
